#!/usr/bin/python3
"""
Test file for MyList class
"""

import unittest
import io
import sys

# Assuming MyList is in a file called 1-my_list.py
try:
    MyList = __import__('1-my_list').MyList
except ImportError:
    # If the module doesn't exist, define the class here for testing
    class MyList(list):
        def print_sorted(self):
            print(sorted(self))


class TestMyList(unittest.TestCase):
    """Test cases for MyList class"""

    def setUp(self):
        """Set up test fixtures before each test method."""
        # Capture stdout for testing print statements
        self.held, sys.stdout = sys.stdout, io.StringIO()

    def tearDown(self):
        """Clean up after each test method."""
        sys.stdout = self.held

    def test_inheritance(self):
        """Test that MyList inherits from list"""
        my_list = MyList()
        self.assertIsInstance(my_list, list)
        self.assertTrue(issubclass(MyList, list))

    def test_empty_list(self):
        """Test print_sorted with empty list"""
        my_list = MyList()
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[]")

    def test_single_element(self):
        """Test print_sorted with single element"""
        my_list = MyList([5])
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[5]")

    def test_sorted_list(self):
        """Test print_sorted with already sorted list"""
        my_list = MyList([1, 2, 3, 4, 5])
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[1, 2, 3, 4, 5]")

    def test_reverse_sorted_list(self):
        """Test print_sorted with reverse sorted list"""
        my_list = MyList([5, 4, 3, 2, 1])
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[1, 2, 3, 4, 5]")

    def test_unsorted_list(self):
        """Test print_sorted with unsorted list (like the main example)"""
        my_list = MyList([1, 4, 2, 3, 5])
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[1, 2, 3, 4, 5]")

    def test_list_unchanged(self):
        """Test that original list remains unchanged"""
        my_list = MyList([1, 4, 2, 3, 5])
        original = my_list.copy()
        my_list.print_sorted()
        self.assertEqual(my_list, original)

    def test_negative_numbers(self):
        """Test print_sorted with negative numbers"""
        my_list = MyList([-3, -1, -5, -2, -4])
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[-5, -4, -3, -2, -1]")

    def test_mixed_positive_negative(self):
        """Test print_sorted with mixed positive and negative numbers"""
        my_list = MyList([-2, 5, -1, 3, 0])
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[-2, -1, 0, 3, 5]")

    def test_duplicates(self):
        """Test print_sorted with duplicate numbers"""
        my_list = MyList([3, 1, 3, 2, 1, 2])
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[1, 1, 2, 2, 3, 3]")

    def test_large_numbers(self):
        """Test print_sorted with large numbers"""
        my_list = MyList([1000, 1, 100, 10])
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[1, 10, 100, 1000]")

    def test_list_methods_still_work(self):
        """Test that inherited list methods still work"""
        my_list = MyList()
        my_list.append(3)
        my_list.append(1)
        my_list.append(2)
        
        self.assertEqual(len(my_list), 3)
        self.assertEqual(my_list[0], 3)
        self.assertEqual(my_list.pop(), 2)
        self.assertEqual(len(my_list), 2)

    def test_initialization_with_data(self):
        """Test creating MyList with initial data"""
        my_list = MyList([4, 2, 6, 1])
        self.assertEqual(len(my_list), 4)
        self.assertEqual(my_list[0], 4)
        
        my_list.print_sorted()
        output = sys.stdout.getvalue().strip()
        self.assertEqual(output, "[1, 2, 4, 6]")


def run_example():
    """Run the example from the main file"""
    print("Running the example:")
    my_list = MyList()
    my_list.append(1)
    my_list.append(4)
    my_list.append(2)
    my_list.append(3)
    my_list.append(5)
    print(my_list)
    my_list.print_sorted()
    print(my_list)


if __name__ == '__main__':
    # Run the example first
    run_example()
    print("\n" + "="*50)
    print("Running unit tests:")
    print("="*50)
    
    # Run the unit tests
    unittest.main(verbosity=2)
